"use strict";var e=require("../commandTypeCheck-Dbzi5OUO.js");function r(e,r,t){const n=e.length;let a,i;if(Array.isArray(r))a=r[0],i=t.makeConditionPredicate(r[1]);else{if("number"==typeof r)return r>=n||r<-n?{t:[],i:Math.sign(r)}:r<0?{t:[n+r]}:{t:[r]};a=r,i=()=>!0}const s=function(e){return"all"===e?{o:!0,l:()=>1,i:0}:("first"===e?e=0:"last"===e&&(e=-1),e<0?{o:!0,l:r=>r===-e-1?2:0,i:-1}:{o:!1,l:r=>r===e?2:0,i:1})}(a),o=[];if(s.o){for(let r=n,t=0;r-- >0;)if(i(e[r])){const e=s.l(t++);if(e&&(o.push(r),2===e))break}}else{for(let r=0,t=0;r<n;++r)if(i(e[r])){const e=s.l(t++);if(e&&(o.push(r),2===e))break}o.reverse()}return{t:o,i:s.i}}function t(e,r,t){const n=r.length;if(t.length!==n)return!1;for(let a=0;a<n;++a)if(!e.isEquals(r[a],t[a]))return!1;return!0}const n=e=>(null===e||"object"!=typeof e)&&"function"!=typeof e,a={push:e.config("array","value...")(((e,r)=>r.length?[...e,...r]:e)),unshift:e.config("array","value...")(((e,r)=>r.length?[...r,...e]:e)),addUnique:e.config("array","value...")(((e,r,t)=>{t.invariant(r.every(n),"cannot add non-primitives");const a=new Set(r.filter((r=>!e.includes(r))));return a.size?[...e,...a]:e})),splice:e.config("array","array...")(((e,r,n)=>{let a=null;return r.forEach((r=>{n.invariant(Array.isArray(r),"expected splice parameter to be an array of arguments to splice()"),r.length&&(0!==r[1]||r.length>2)&&(a||=n.copy(e),Array.prototype.splice.apply(a,r))})),a&&!t(n,e,a)?a:e})),insert:e.config("array","enum[before,after]","multi-locator","value...")(((e,[t,n,...a],i)=>{const s=e.length,{t:o,i:l}=r(e,n,i);!o.length&&l&&o.push(l>0?s:-1);const c="before"===t?0:1;return i.incLoopNesting(o.length,(()=>i.update(e,["splice",...o.map((e=>[Math.max(0,Math.min(s,e+c)),0,...a]))])))})),insertBeforeFirstWhere:e.config("array","condition","value...")(((e,[r,...t],n)=>n.update(e,["insert","before",["first",r],...t]))),insertAfterFirstWhere:e.config("array","condition","value...")(((e,[r,...t],n)=>n.update(e,["insert","after",["first",r],...t]))),insertBeforeLastWhere:e.config("array","condition","value...")(((e,[r,...t],n)=>n.update(e,["insert","before",["last",r],...t]))),insertAfterLastWhere:e.config("array","condition","value...")(((e,[r,...t],n)=>n.update(e,["insert","after",["last",r],...t]))),update:e.config("array","multi-locator","spec","elseInit:value?")(((e,[t,n,a],i)=>{const s={},{t:o,insertStart:l}=r(e,t,i);return o.length||void 0===a||(l?(o.push(0),e=[a,...e]):(o.push(e.length),e=[...e,a])),i.incLoopNesting(o.length,(()=>{o.forEach((r=>{const t=e[r],a=i.update(t,n,{allowUnset:!0});Object.is(a,t)||(s[r]=["=",a])}))})),i.update(e,s)})),updateAll:e.config("array","spec")(((e,[r],t)=>t.update(e,["update","all",r]))),updateWhere:e.config("array","condition","spec","elseInit:value?")(((e,[r,t,n],a)=>a.update(e,["update",["all",r],t,n]))),updateFirstWhere:e.config("array","condition","spec","elseInit:value?")(((e,[r,t,n],a)=>a.update(e,["update",["first",r],t,n]))),updateLastWhere:e.config("array","condition","spec","elseInit:value?")(((e,[r,t,n],a)=>a.update(e,["update",["last",r],t,n]))),delete:e.config("array","multi-locator")(((e,[t],n)=>{const{t:a}=r(e,t,n);return n.update(e,["splice",...a.map((e=>[e,1]))])})),deleteWhere:e.config("array","condition")(((e,[r],t)=>t.update(e,["delete",["all",r]]))),deleteFirstWhere:e.config("array","condition")(((e,[r],t)=>t.update(e,["delete",["first",r]]))),deleteLastWhere:e.config("array","condition")(((e,[r],t)=>t.update(e,["delete",["last",r]]))),swap:e.config("array","single-locator","single-locator")(((e,[t,n],a)=>{const{t:i}=r(e,t,a),{t:s}=r(e,n,a);if(1!==i.length||1!==s.length)return e;const[o]=i,[l]=s,c=e[o],u=e[l];if(o===l||a.isEquals(c,u))return e;const d=[...e];return d[o]=u,d[l]=c,d})),move:e.config("array","multi-locator","enum[before,after]","single-locator")(((e,[n,a,i],s)=>{const{t:o}=r(e,n,s),{t:l}=r(e,i,s);if(o.reverse(),0===o.length||1!==l.length)return e;if(o.includes(l[0]))return e;const c=o.map((r=>e[r])),u=l[0]+("after"===a?1:0),d=[];for(let r=0,t=0;r<e.length;++r)r!==o[t]?(r===u&&d.push(...c),d.push(e[r])):++t;return u===e.length&&d.push(...c),t(s,e,d)?e:d}))};a.every=a.updateAll;var i={commands:a,conditions:{contains:(e,r)=>{const t=r.makeConditionPredicate(e);return e=>Array.isArray(e)&&Array.prototype.some.call(e,t)},notContains:(e,r)=>{const t=r.makeConditionPredicate(e);return e=>!Array.isArray(e)||!Array.prototype.some.call(e,t)}}};module.exports=i;
