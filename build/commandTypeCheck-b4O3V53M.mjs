const e=/^enum\[(.+)\]$/;function t(t){switch(t){case"*":case"value":return()=>!0;case"array":return Array.isArray;case"condition":case"spec":return e=>"object"==typeof e;case"single-locator":return r(["first","last"]);case"multi-locator":return r(["first","last","all"]);case"primitive":return e=>["number","string"].includes(typeof e);default:const c=e.exec(t);if(c){const e=c[1].split(",");return t=>"string"==typeof t&&e.includes(t)}return e=>typeof e===t}}const r=e=>t=>{if(Array.isArray(t)){if(2!==t.length||"object"!=typeof t[1])return!1;t=t[0]}return"number"==typeof t&&Math.round(t)===t||e.includes(t)};function c(e){let[r,c]=e.split(":");return c=c||r,r=r.replace(/(\.\.\.|\?)$/,""),c.endsWith("...")?{variadic:!0,optional:!0,check:t(c.slice(0,-3)),name:r,suffix:"..."}:c.endsWith("?")?{variadic:!1,optional:!0,check:t(c.slice(0,-1)),name:r,suffix:"?"}:{variadic:!1,optional:!1,check:t(c),name:r,suffix:""}}var a=(e,...t)=>{const r=c(e),a=t.map(c),n=["command",...a.map((e=>e.name+e.suffix))],o=`expected target to be ${r.name}`,i=`expected [${n.join(", ")}]`,s=a.filter((e=>!e.optional)).length,u=a.some((e=>e.variadic))?Number.POSITIVE_INFINITY:a.length;return e=>(t,c,n)=>{n.invariant(r.optional&&void 0===t||r.check(t),o),n.invariant(c.length>=s&&c.length<=u,i);for(let e=0;e<c.length;++e){const{variadic:t,check:r}=a[e];if(n.invariant(r(c[e]),i),t)for(++e;e<c.length;++e)n.invariant(r(c[e]),i)}return e(t,c,n)}};export{a as c};
